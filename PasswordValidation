package myPracticePackage;
import java.util.Scanner;
import java.util.Arrays;
/*Write a Java program to check whether a string is a valid password.Must use Functions and Arrays.
Password rules:
A password must have at least ten characters.
A password must contain at least two numbers.
A password must not contains certain collection of common (create your own set of words) words
A password must contains at least a UpperCase words
Password should not match previous two, so collect the valid password getting from input,
A password must contains at-least a special character. 
 */
public class PasswordValidation {

	static String[] lastTwoPwd = new String[2];
	//static String[] lastTwoPwd = {"Tester@123","#Tester123"};

	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in); 

		System.out.println("Enter last 2 passwords :");
		
		lastTwoPwd[0] = sc.nextLine();
		lastTwoPwd[1] = sc.nextLine();		
		
		System.out.println("Enter password to be validated :");
		
		String pwdInput = sc.nextLine();
		sc.close();
		
		PasswordValidation pwdVal = new PasswordValidation(); //creating an object of class PasswordValidation
		//System.out.println(pwdVal.validatePwd(pwdInput));
		//System.out.println(Arrays.toString(lastTwoPwd));
		//String pwdValidityMsg = pwdVal.validatePwd(pwdInput);


		if(pwdInput.equals(lastTwoPwd[0]) || pwdInput.equals(lastTwoPwd[1])) 
			System.out.println("The password cannot be same as the last 2 passwords");
		else
			System.out.println(pwdVal.validatePwd(pwdInput));	//calling method validatePwd

		/*if(pwdValidityMsg.equals("Valid Password")) 			//storing the last 2 passwords in a string array
		{
			lastTwoPwd[0] = lastTwoPwd[1];
			lastTwoPwd[1] = pwdInput;
		}*/
		//System.out.println(Arrays.toString(lastTwoPwd));

		
	}

	String validatePwd(String str) 
	{
		char[] ch = str.toCharArray(); // Convert String into a char array

		// To check if the password is atleast 10 charaters long
		if (ch.length < 10) {
			return ("The password must be atleast 10 characters long");
		}

		// To check if password contains at least two numbers
		int count = 0;
		for (char c : ch) // for every character in the character array ch
		{
			if (Character.isDigit(c)) // if the character is a digit
			{
				count = count + 1; // count the number of occurrences of digits
			}
		}
		if (count < 2) {
			return ("The Password should contain atleast 2 numbers");
		}

		// To check if password does not contains a certain collection of words
		String[] strExcludeArr = { "cat", "pet", "east", "bird" }; // define a collection of words to be excluded
		String lowerStr = str.toLowerCase(); 				// convert the input string to lower case
		for (int i = 0; i < strExcludeArr.length; i++)		// check the password against every word in the exclude words array
		{
			if (lowerStr.contains(strExcludeArr[i])) 		// use contains method to check if the string contains the substring
			{
				return ("The Password cannot include certain words, please try again with a different password");
			}
		}

		// To check if the password contains atleast 1 uppercase letter
		boolean isUpperCase = false;
		for (char c : ch) 
		{
			if (c >= 65 && c <= 90) 
			{
				isUpperCase = true;			
				break;										//break when first uppercase letter is encountered
			}
		}
		if (isUpperCase == false) 
		{
			return ("The Password must include atleast 1 upper case letter");
		}

		// To check if the password contains atleast 1 special character - ASCII values taken from ASCII table
		boolean isSplChar = false;
		for (char c : ch) 
		{
			if ((c >= 33 && c <= 47) || (c >= 58 && c <= 64) || (c >= 91 && c <= 96) || (c >= 123 && c <= 126)) 
			{
				isSplChar = true;
				break;										//break when first special character is encountered
			}
		}
		if (isSplChar == false) 
		{
			return ("The Password must include atleast 1 special character");
		}

		return ("Valid Password");

	}

}
